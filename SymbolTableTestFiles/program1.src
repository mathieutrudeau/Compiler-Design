struct Class1 
{
    private let b:integer;

    public let B: integer;

    public let BB: float;

    public let NewVar: float[6];

    public let NVar: float[4][5];

    public func A(a:integer,b:integer) -> integer;

};


struct Class2 inherits Class1
{
    public let CC: Class1;
};

impl Class1
{
    func A(a:integer, b:integer) ->integer
    {
        let theOldVar: integer;

        return (-6);
    }

    
}

impl Class2{
func A(a:integer, b:integer) ->integer
    {
        let myNewVar: float;

        let bbb: integer;
        bbb=4;

        return (bbb);

    }
}




func test1() -> void
{
    let a: Class1;
    let d: Class2;

    d.CC.B = 4;

    let f: integer;
    let c: integer[3][3][3][3];

    f=0;

    c[3][d.CC.B][2][2] = f;

    //d= 4;
    
    if(4<2) then {
        
    }
    else{

    };

    
}


func NewFunc(arr: integer[][], b:float[1], sv:integer[9], c: integer ) -> void
{
    //let a:integer[3][3];
    
}


func ffas(arr: Class1[][3ds],a:integer) -> float
{

    arr[3][5].b = 4;

    let b:integer;

    if(2<4) then {
        return (0.0);
    }
    else{
        
    };

    return (3.0);
}




func main() -> void
{
    let a: Class1[10][11];
    let f: integer;

    //a = 3;

    let b: integer;

    //b = ffas();

    ffas(a,f);

    while(4>f) 
    {

    };

    

}

