/* This is a sample program */
// This is an inline


struct a  inherits b,c,d
{ 
  private let a : string; 
  public let b : float;
  public let c : float[2][][][];
  public func f() -> void;
  private func f() -> float;
  private func f( a:float[1],d:integer[],g:float) -> newType;
};


impl B {
func A () -> void {
  let a : integer;
}
func A () -> void {

}
}

func A (
a:float[][2][],sd:s[3]
) -> void
{
let a : integer[2];


return (3);
return (3.4);
return (!3);
return (+3);
return (-3.9);
//return ((3+2-1*3/4));
//return (3 | (3 & 4.2));
//write (3 + 3 * 4 -1);

//while(3 + 3 <= (3.4));

/*
if(3<>4) then 
{
  return (-3.9);
   return (-3.9);
}
else 
{
  return (-3.9);
  return (-3.9);
}
;
*/

let a: a;

read (a.aa(1>2,1-1,2==(3*2-2)).a[a[2][a].a().a(a>a)]);


a = a.a().a(a>3);

a[a].a();

a=3.1;

//a().a[2];

}


/* This is a block comment
   that spans over multiple lines 
   
   <START>              ::= <prog>   =======================================================
<prog>               ::= {{<structOrImplOrfunc>}}    =========================================
<structOrImplOrFunc> ::= <structDecl> | <implDef> | <funcDef>  ========================================
<structDecl>         ::= 'struct' 'id' [['inherits' 'id' {{',' 'id'}}]] '{' {{<visibility> <memberDecl>}} '}' ';' ===================
<implDef>            ::= 'impl' 'id' '{' {{<funcDef>}} '}' ==================================================
<funcDef>            ::= <funcHead> <funcBody>   =====================================================
<visibility>         ::= 'public' | 'private'  =============================================
<memberDecl>         ::= <funcDecl> | <varDecl>   =============================================
<funcDecl>           ::= <funcHead> ';'   ====================================================
<funcHead>           ::= 'func' 'id' '(' <fParams> ')' '‐>' <returnType>  =========================================
<funcBody>           ::= '{' {{<varDeclOrStat>}} '}' =============================================================
<varDeclOrStat>      ::= <varDecl> | <statement>   ================================================================
<varDecl>            ::= 'let' 'id' ':' <type> {{<arraySize>}} ';' ===============================================
<statement>          ::= <assignStat> ';'
                      |  'if'     '(' <relExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' =====================
                      |  'while'  '(' <relExpr> ')' <statBlock> ';' ===================================
                      |  'read'   '(' <variable> ')' ';' ==========================================
                      |  'write'  '(' <expr> ')' ';' ===========================================
                      |  'return' '(' <expr> ')' ';' ============================================
                      |  <functionCall> ';'
<assignStat>         ::= <variable> <assignOp> <expr>
<statBlock>          ::= '{' {{<statement>}} '}' | <statement> | EPSILON   ====================================
<expr>               ::= <arithExpr> | <relExpr> =============================================
<relExpr>            ::= <arithExpr> <relOp> <arithExpr>    ==========================================
<arithExpr>          ::= <arithExpr> <addOp> <term> | <term>   ===========================================
<sign>               ::= '+' | '‐' ============================================================
<term>               ::= <term> <multOp> <factor> | <factor> =============================================
<factor>             ::= <variable> ============================================
                      |  <functionCall> =========================================
                      |  'intLit' | 'floatLit' ==============================================
                      |  '(' <arithExpr> ')' ==================================================
                      |  'not' <factor>     =================================================
                      |  <sign> <factor>    =================================================
<variable>           ::= {{<idnest>}} 'id' {{<indice>}} ========================================
<functionCall>       ::= {{<idnest>}} 'id' '(' <aParams> ')' =========================================
<idnest>             ::= 'id' {{<indice>}} '.'  =====================================
                      |  'id' '(' <aParams> ')' '.'  ============================
<indice>             ::= '[' <arithExpr> ']' ===========================================
<arraySize>          ::= '[' 'intNum' ']' | '[' ']' =============================================
<type>               ::= 'integer' | 'float' | 'id' ============================================
<returnType>         ::= <type> |  'void' ============================================
<fParams>            ::= 'id' ':' <type> {{<arraySize>}} {{<fParamsTail>}} | EPSILON   =====================
<aParams>            ::= <expr> {{<aParamsTail>}} | EPSILON  ====================================================
<fParamsTail>        ::= ',' 'id' ':' <type> {{<arraySize>}}  ===============================
<aParamsTail>        ::= ',' <expr>  ======================================================================
<assignOp>           ::= '='
<relOp>              ::= 'eq' | 'neq' | 'lt' | 'gt' | 'leq' | 'geq'  ======================================
<addOp>              ::= '+' | '‐' | 'or'  ==================================================
<multOp>             ::= '*' | '/' | 'and' ===================================================

   
   */