[blockcmt, /* This is a sample program */, 1]
[inlinecmt, // This is an inline, 2]
[struct, struct, 5]
[id, a, 5]
[inherits, inherits, 5]
[id, b, 5]
[comma, ,, 5]
[id, c, 5]
[comma, ,, 5]
[id, d, 5]
[opencubr, {, 6]
[private, private, 7]
[let, let, 7]
[id, a, 7]
[colon, :, 7]
[id, string, 7]
[semi, ;, 7]
[public, public, 8]
[let, let, 8]
[id, b, 8]
[colon, :, 8]
[float, float, 8]
[semi, ;, 8]
[public, public, 9]
[let, let, 9]
[id, c, 9]
[colon, :, 9]
[float, float, 9]
[opensqbr, [, 9]
[intnum, 2, 9]
[closesqbr, ], 9]
[opensqbr, [, 9]
[closesqbr, ], 9]
[opensqbr, [, 9]
[closesqbr, ], 9]
[opensqbr, [, 9]
[closesqbr, ], 9]
[semi, ;, 9]
[public, public, 10]
[func, func, 10]
[id, f, 10]
[openpar, (, 10]
[closepar, ), 10]
[arrow, ->, 10]
[void, void, 10]
[semi, ;, 10]
[private, private, 11]
[func, func, 11]
[id, f, 11]
[openpar, (, 11]
[closepar, ), 11]
[arrow, ->, 11]
[float, float, 11]
[semi, ;, 11]
[private, private, 12]
[func, func, 12]
[id, f, 12]
[openpar, (, 12]
[id, a, 12]
[colon, :, 12]
[float, float, 12]
[opensqbr, [, 12]
[intnum, 1, 12]
[closesqbr, ], 12]
[comma, ,, 12]
[id, d, 12]
[colon, :, 12]
[integer, integer, 12]
[opensqbr, [, 12]
[closesqbr, ], 12]
[comma, ,, 12]
[id, g, 12]
[colon, :, 12]
[float, float, 12]
[closepar, ), 12]
[arrow, ->, 12]
[id, newType, 12]
[semi, ;, 12]
[closecubr, }, 13]
[semi, ;, 13]
[impl, impl, 16]
[id, B, 16]
[opencubr, {, 16]
[func, func, 17]
[id, A, 17]
[openpar, (, 17]
[closepar, ), 17]
[arrow, ->, 17]
[void, void, 17]
[opencubr, {, 17]
[let, let, 18]
[id, a, 18]
[colon, :, 18]
[integer, integer, 18]
[semi, ;, 18]
[closecubr, }, 19]
[func, func, 20]
[id, A, 20]
[openpar, (, 20]
[closepar, ), 20]
[arrow, ->, 20]
[void, void, 20]
[opencubr, {, 20]
[closecubr, }, 22]
[closecubr, }, 23]
[func, func, 25]
[id, A, 25]
[openpar, (, 25]
[id, a, 26]
[colon, :, 26]
[float, float, 26]
[opensqbr, [, 26]
[closesqbr, ], 26]
[opensqbr, [, 26]
[intnum, 2, 26]
[closesqbr, ], 26]
[opensqbr, [, 26]
[closesqbr, ], 26]
[comma, ,, 26]
[id, sd, 26]
[colon, :, 26]
[id, s, 26]
[opensqbr, [, 26]
[intnum, 3, 26]
[closesqbr, ], 26]
[closepar, ), 27]
[arrow, ->, 27]
[void, void, 27]
[opencubr, {, 28]
[let, let, 29]
[id, a, 29]
[colon, :, 29]
[integer, integer, 29]
[opensqbr, [, 29]
[intnum, 2, 29]
[closesqbr, ], 29]
[semi, ;, 29]
[return, return, 32]
[openpar, (, 32]
[intnum, 3, 32]
[closepar, ), 32]
[semi, ;, 32]
[return, return, 33]
[openpar, (, 33]
[floatnum, 3.4, 33]
[closepar, ), 33]
[semi, ;, 33]
[return, return, 34]
[openpar, (, 34]
[not, !, 34]
[intnum, 3, 34]
[closepar, ), 34]
[semi, ;, 34]
[return, return, 35]
[openpar, (, 35]
[plus, +, 35]
[intnum, 3, 35]
[closepar, ), 35]
[semi, ;, 35]
[return, return, 36]
[openpar, (, 36]
[minus, -, 36]
[floatnum, 3.9, 36]
[closepar, ), 36]
[semi, ;, 36]
[inlinecmt, //return ((3+2-1*3/4));, 37]
[inlinecmt, //return (3 | (3 & 4.2));, 38]
[inlinecmt, //write (3 + 3 * 4 -1);, 39]
[inlinecmt, //while(3 + 3 <= (3.4));, 41]
[blockcmt, /*\nif(3<>4) then \n{\n  return (-3.9);\n   return (-3.9);\n}\nelse \n{\n  return (-3.9);\n  return (-3.9);\n}\n;\n*/, 43]
[let, let, 57]
[id, a, 57]
[colon, :, 57]
[id, a, 57]
[semi, ;, 57]
[read, read, 59]
[openpar, (, 59]
[id, a, 59]
[dot, ., 59]
[id, aa, 59]
[openpar, (, 59]
[intnum, 1, 59]
[gt, >, 59]
[intnum, 2, 59]
[comma, ,, 59]
[intnum, 1, 59]
[minus, -, 59]
[intnum, 1, 59]
[comma, ,, 59]
[intnum, 2, 59]
[eq, ==, 59]
[openpar, (, 59]
[intnum, 3, 59]
[mult, *, 59]
[intnum, 2, 59]
[minus, -, 59]
[intnum, 2, 59]
[closepar, ), 59]
[closepar, ), 59]
[dot, ., 59]
[id, a, 59]
[opensqbr, [, 59]
[id, a, 59]
[opensqbr, [, 59]
[intnum, 2, 59]
[closesqbr, ], 59]
[opensqbr, [, 59]
[id, a, 59]
[closesqbr, ], 59]
[dot, ., 59]
[id, a, 59]
[openpar, (, 59]
[closepar, ), 59]
[dot, ., 59]
[id, a, 59]
[openpar, (, 59]
[id, a, 59]
[gt, >, 59]
[id, a, 59]
[closepar, ), 59]
[closesqbr, ], 59]
[closepar, ), 59]
[semi, ;, 59]
[id, a, 62]
[assign, =, 62]
[id, a, 62]
[dot, ., 62]
[id, a, 62]
[openpar, (, 62]
[closepar, ), 62]
[dot, ., 62]
[id, a, 62]
[openpar, (, 62]
[id, a, 62]
[gt, >, 62]
[intnum, 3, 62]
[closepar, ), 62]
[semi, ;, 62]
[id, a, 64]
[opensqbr, [, 64]
[id, a, 64]
[closesqbr, ], 64]
[dot, ., 64]
[id, a, 64]
[openpar, (, 64]
[closepar, ), 64]
[semi, ;, 64]
[id, a, 66]
[assign, =, 66]
[floatnum, 3.1, 66]
[semi, ;, 66]
[inlinecmt, //a().a[2];, 68]
[id, a, 70]
[assign, =, 70]
[plus, +, 70]
[plus, +, 70]
[intnum, 3, 70]
[plus, +, 70]
[intnum, 2, 70]
[semi, ;, 70]
[closecubr, }, 71]
[struct, struct, 72]
[id, s, 72]
[blockcmt, /* This is a block comment\n   that spans over multiple lines \n   \n<START>              ::= <prog>   =======================================================\n<prog>               ::= {{<structOrImplOrfunc>}}    =========================================\n<structOrImplOrFunc> ::= <structDecl> | <implDef> | <funcDef>  ========================================\n<structDecl>         ::= 'struct' 'id' [['inherits' 'id' {{',' 'id'}}]] '{' {{<visibility> <memberDecl>}} '}' ';' ===================\n<implDef>            ::= 'impl' 'id' '{' {{<funcDef>}} '}' ==================================================\n<funcDef>            ::= <funcHead> <funcBody>   =====================================================\n<visibility>         ::= 'public' | 'private'  =============================================\n<memberDecl>         ::= <funcDecl> | <varDecl>   =============================================\n<funcDecl>           ::= <funcHead> ';'   ====================================================\n<funcHead>           ::= 'func' 'id' '(' <fParams> ')' '‐>' <returnType>  =========================================\n<funcBody>           ::= '{' {{<varDeclOrStat>}} '}' =============================================================\n<varDeclOrStat>      ::= <varDecl> | <statement>   ================================================================\n<varDecl>            ::= 'let' 'id' ':' <type> {{<arraySize>}} ';' ===============================================\n<statement>          ::= <assignStat> ';'\n                      |  'if'     '(' <relExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' =====================\n                      |  'while'  '(' <relExpr> ')' <statBlock> ';' ===================================\n                      |  'read'   '(' <variable> ')' ';' ==========================================\n                      |  'write'  '(' <expr> ')' ';' ===========================================\n                      |  'return' '(' <expr> ')' ';' ============================================\n                      |  <functionCall> ';'\n<assignStat>         ::= <variable> <assignOp> <expr>\n<statBlock>          ::= '{' {{<statement>}} '}' | <statement> | EPSILON   ====================================\n<expr>               ::= <arithExpr> | <relExpr> =============================================\n<relExpr>            ::= <arithExpr> <relOp> <arithExpr>    ==========================================\n<arithExpr>          ::= <arithExpr> <addOp> <term> | <term>   ===========================================\n<sign>               ::= '+' | '‐' ============================================================\n<term>               ::= <term> <multOp> <factor> | <factor> =============================================\n<factor>             ::= <variable> ============================================\n                      |  <functionCall> =========================================\n                      |  'intLit' | 'floatLit' ==============================================\n                      |  '(' <arithExpr> ')' ==================================================\n                      |  'not' <factor>     =================================================\n                      |  <sign> <factor>    =================================================\n<variable>           ::= {{<idnest>}} 'id' {{<indice>}} ========================================\n<functionCall>       ::= {{<idnest>}} 'id' '(' <aParams> ')' =========================================\n<idnest>             ::= 'id' {{<indice>}} '.'  =====================================\n                      |  'id' '(' <aParams> ')' '.'  ============================\n<indice>             ::= '[' <arithExpr> ']' ===========================================\n<arraySize>          ::= '[' 'intNum' ']' | '[' ']' =============================================\n<type>               ::= 'integer' | 'float' | 'id' ============================================\n<returnType>         ::= <type> |  'void' ============================================\n<fParams>            ::= 'id' ':' <type> {{<arraySize>}} {{<fParamsTail>}} | EPSILON   =====================\n<aParams>            ::= <expr> {{<aParamsTail>}} | EPSILON  ====================================================\n<fParamsTail>        ::= ',' 'id' ':' <type> {{<arraySize>}}  ===============================\n<aParamsTail>        ::= ',' <expr>  ======================================================================\n<assignOp>           ::= '='\n<relOp>              ::= 'eq' | 'neq' | 'lt' | 'gt' | 'leq' | 'geq'  ======================================\n<addOp>              ::= '+' | '‐' | 'or'  ==================================================\n<multOp>             ::= '*' | '/' | 'and' ===================================================\n\n   \n   */, 75]
