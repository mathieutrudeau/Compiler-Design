[inlinecmt, // ====== struct declarations ====== //, 1]
[struct, struct, 2]
[id, POLYNOMIAL, 2]
[opencubr, {, 2]
[public, public, 3]
[func, func, 3]
[id, evaluate, 3]
[openpar, (, 3]
[id, x, 3]
[colon, :, 3]
[float, float, 3]
[closepar, ), 3]
[arrow, ->, 3]
[float, float, 3]
[semi, ;, 3]
[closecubr, }, 4]
[semi, ;, 4]
[struct, struct, 6]
[id, LINEAR, 6]
[inherits, inherits, 6]
[id, POLYNOMIAL, 6]
[opencubr, {, 6]
[private, private, 7]
[let, let, 7]
[id, a, 7]
[colon, :, 7]
[float, float, 7]
[semi, ;, 7]
[private, private, 8]
[let, let, 8]
[id, b, 8]
[colon, :, 8]
[float, float, 8]
[semi, ;, 8]
[public, public, 9]
[func, func, 9]
[id, build, 9]
[openpar, (, 9]
[id, A, 9]
[colon, :, 9]
[float, float, 9]
[comma, ,, 9]
[id, B, 9]
[colon, :, 9]
[float, float, 9]
[closepar, ), 9]
[arrow, ->, 9]
[id, LINEAR, 9]
[semi, ;, 9]
[public, public, 10]
[func, func, 10]
[id, evaluate, 10]
[openpar, (, 10]
[id, x, 10]
[colon, :, 10]
[float, float, 10]
[closepar, ), 10]
[arrow, ->, 10]
[float, float, 10]
[semi, ;, 10]
[closecubr, }, 11]
[semi, ;, 11]
[struct, struct, 13]
[id, QUADRATIC, 13]
[inherits, inherits, 13]
[id, POLYNOMIAL, 13]
[opencubr, {, 13]
[private, private, 14]
[let, let, 14]
[id, a, 14]
[colon, :, 14]
[float, float, 14]
[semi, ;, 14]
[private, private, 15]
[let, let, 15]
[id, b, 15]
[colon, :, 15]
[float, float, 15]
[semi, ;, 15]
[private, private, 16]
[let, let, 16]
[id, c, 16]
[colon, :, 16]
[float, float, 16]
[semi, ;, 16]
[public, public, 17]
[func, func, 17]
[id, build, 17]
[openpar, (, 17]
[id, A, 17]
[colon, :, 17]
[float, float, 17]
[comma, ,, 17]
[id, B, 17]
[colon, :, 17]
[float, float, 17]
[comma, ,, 17]
[id, C, 17]
[colon, :, 17]
[float, float, 17]
[closepar, ), 17]
[arrow, ->, 17]
[id, QUADRATIC, 17]
[semi, ;, 17]
[public, public, 18]
[func, func, 18]
[id, evaluate, 18]
[openpar, (, 18]
[id, x, 18]
[colon, :, 18]
[float, float, 18]
[closepar, ), 18]
[arrow, ->, 18]
[float, float, 18]
[semi, ;, 18]
[closecubr, }, 19]
[semi, ;, 19]
[inlinecmt, // ====== struct implementations ====== //, 21]
[impl, impl, 22]
[id, POLYNOMIAL, 22]
[opencubr, {, 22]
[func, func, 23]
[id, evaluate, 23]
[openpar, (, 23]
[id, x, 23]
[colon, :, 23]
[float, float, 23]
[closepar, ), 23]
[arrow, ->, 23]
[float, float, 23]
[opencubr, {, 24]
[return, return, 25]
[openpar, (, 25]
[intnum, 0, 25]
[closepar, ), 25]
[semi, ;, 25]
[closecubr, }, 26]
[closecubr, }, 27]
[impl, impl, 29]
[id, QUADRATIC, 29]
[opencubr, {, 29]
[func, func, 30]
[id, evaluate, 30]
[openpar, (, 30]
[id, x, 30]
[colon, :, 30]
[float, float, 30]
[closepar, ), 30]
[arrow, ->, 30]
[float, float, 30]
[opencubr, {, 31]
[let, let, 32]
[id, result, 32]
[colon, :, 32]
[float, float, 32]
[semi, ;, 32]
[inlinecmt, //Using Horner's method, 33]
[id, result, 34]
[assign, =, 34]
[id, a, 34]
[semi, ;, 34]
[id, result, 35]
[assign, =, 35]
[id, result, 35]
[mult, *, 35]
[id, x, 35]
[plus, +, 35]
[id, b, 35]
[semi, ;, 35]
[id, result, 36]
[assign, =, 36]
[id, result, 36]
[mult, *, 36]
[id, x, 36]
[plus, +, 36]
[id, c, 36]
[semi, ;, 36]
[return, return, 37]
[openpar, (, 37]
[id, result, 37]
[closepar, ), 37]
[semi, ;, 37]
[closecubr, }, 38]
[func, func, 39]
[id, build, 39]
[openpar, (, 39]
[id, A, 39]
[colon, :, 39]
[float, float, 39]
[comma, ,, 39]
[id, B, 39]
[colon, :, 39]
[float, float, 39]
[comma, ,, 39]
[id, C, 39]
[colon, :, 39]
[float, float, 39]
[closepar, ), 39]
[arrow, ->, 39]
[id, QUADRATIC, 39]
[opencubr, {, 40]
[let, let, 41]
[id, new_function, 41]
[colon, :, 41]
[id, QUADRATIC, 41]
[semi, ;, 41]
[id, new_function, 42]
[dot, ., 42]
[id, a, 42]
[assign, =, 42]
