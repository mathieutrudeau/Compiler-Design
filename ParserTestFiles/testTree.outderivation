<START> 
<prog> 'eof' 
<rept-prog0> 'eof' 
<structOrImplOrfunc> <rept-prog0> 'eof' 
<funcDef> <rept-prog0> 'eof' 
<funcHead> <funcBody> <rept-prog0> 'eof' 
'func' 'id' '(' <fParams> ')' 'arrow' <returnType> <funcBody> <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' <returnType> <funcBody> <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' <funcBody> <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' <varDeclOrStat> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' <statement> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' <statement-Id-nest> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' <assignOp> <expr> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' <expr> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' <arithExpr> <expr2> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' <term> <rightrec-arithExpr> <expr2> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' <factor> <rightRecTerm> <rightrec-arithExpr> <expr2> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' <rightRecTerm> <rightrec-arithExpr> <expr2> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' <rightrec-arithExpr> <expr2> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' <expr2> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' <varDeclOrStat> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' <statement> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' <relExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' <arithExpr> <relOp> <arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' <term> <rightrec-arithExpr> <relOp> <arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' <factor> <rightRecTerm> <rightrec-arithExpr> <relOp> <arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' <rightRecTerm> <rightrec-arithExpr> <relOp> <arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' <rightrec-arithExpr> <relOp> <arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' <relOp> <arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' <arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' <term> <rightrec-arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' <factor> <rightRecTerm> <rightrec-arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' <rightRecTerm> <rightrec-arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' <rightrec-arithExpr> ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' <statBlock> 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' <rept-statBlock1> '}' 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' <rept-statBlock1> '}' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' <varDeclOrStat> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' <statement> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' <relExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' <arithExpr> <relOp> <arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' <term> <rightrec-arithExpr> <relOp> <arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' <factor> <rightRecTerm> <rightrec-arithExpr> <relOp> <arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' <rightRecTerm> <rightrec-arithExpr> <relOp> <arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' <rightrec-arithExpr> <relOp> <arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' <relOp> <arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' <arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' <term> <rightrec-arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' <factor> <rightRecTerm> <rightrec-arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' <rightRecTerm> <rightrec-arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' <rightrec-arithExpr> ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' <statBlock> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' <rept-statBlock1> '}' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' <varDeclOrStat> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' <statement> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' <expr> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' <arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' <term> <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' <factor> <rightRecTerm> <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' <factor> <rightRecTerm> <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' <sign> <factor> <rightRecTerm> <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' <factor> <rightRecTerm> <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' <rightRecTerm> <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' <varDeclOrStat> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' <statement> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' <expr> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' <arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' <term> <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' <factor> <rightRecTerm> <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' <rightRecTerm> <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' <rightrec-arithExpr> <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' <expr2> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' <relOp> <arithExpr> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' <arithExpr> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' <term> <rightrec-arithExpr> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' <factor> <rightRecTerm> <rightrec-arithExpr> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' <factor> <rightRecTerm> <rightrec-arithExpr> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' <rightRecTerm> <rightrec-arithExpr> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' <rightrec-arithExpr> ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' <varDeclOrStat> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' <statement> <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' 'id' <statement-Id-nest> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' 'id' '(' <aParams> ')' <statement-Id-nest2> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' 'id' '(' ')' <statement-Id-nest2> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' 'id' '(' ')' '.' 'id' <statement-Id-nest> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' 'id' '(' ')' '.' 'id' '(' <aParams> ')' <statement-Id-nest2> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' 'id' '(' ')' '.' 'id' '(' ')' <statement-Id-nest2> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' 'id' '(' ')' '.' 'id' '(' ')' '.' 'id' <statement-Id-nest> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
'func' 'id' '(' ')' 'arrow' 'void' '{' 'id' '=' 'intlit' ';' 'if' '(' 'intlit' 'neq' 'intlit' ')' 'then' '{' '}' 'else' '{' '}' ';' 'while' '(' 'intlit' 'gt' 'intlit' ')' '{' '}' ';' 'write' '(' 'not' '-' 'floatlit' ')' ';' 'return' '(' 'intlit' 'geq' 'not' 'intlit' ')' ';' 'id' '(' ')' '.' 'id' '(' ')' '.' 'id' <assignOp> <expr> ';' <rept-funcBody1> '}' <rept-prog0> 'eof' 
